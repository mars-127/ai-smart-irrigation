import network
import urequests
import ujson
import time
from machine import Pin, ADC, Timer
from dht import DHT11
import urequests as requests
import ubinascii

# Configuration
WIFI_SSID = "YOUR_WIFI"
WIFI_PASS = "YOUR_PASSWORD"
GOOGLE_SCRIPT_URL = "YOUR_GOOGLE_APPS_SCRIPT_URL"
EDGE_IMPULSE_URL = "YOUR_EDGE_IMPULSE_API_URL"
EI_API_KEY = "YOUR_EI_API_KEY"
EMAIL_ALERT_THRESHOLD = 50  # Soil moisture percentage

# Pins
relay = Pin(23, Pin.OUT, value=1)  # Active-low relay
flow_sensor = Pin(5, Pin.IN, Pin.PULL_UP)
dht_sensor = DHT11(Pin(4))
soil_moisture = ADC(Pin(34))
soil_moisture.atten(ADC.ATTN_11DB)  # Full range 0-3.3V

# Flow sensor variables
flow_rate = 0
pulse_count = 0
last_flow_check = 0

def connect_wifi():
    sta_if = network.WLAN(network.STA_IF)
    if not sta_if.isconnected():
        print("Connecting to WiFi...")
        sta_if.active(True)
        sta_if.connect(WIFI_SSID, WIFI_PASS)
        while not sta_if.isconnected():
            pass
    print("Network config:", sta_if.ifconfig())

def flow_handler(pin):
    global pulse_count
    pulse_count += 1

def get_sensor_data():
    # Read DHT11
    dht_sensor.measure()
    temp = dht_sensor.temperature()
    hum = dht_sensor.humidity()
    
    # Read soil moisture (0-4095, higher is drier)
    soil_raw = soil_moisture.read()
    soil_percent = 100 - ((soil_raw - 1500) / (3500 - 1500)) * 100  # Calibrated values
    soil_percent = max(0, min(100, soil_percent))
    
    # Calculate flow rate
    global flow_rate, pulse_count, last_flow_check
    if time.ticks_diff(time.ticks_ms(), last_flow_check) > 1000:
        flow_rate = (pulse_count / 4.5)  # 4.5 pulses per liter/minute
        pulse_count = 0
        last_flow_check = time.ticks_ms()
    
    return {
        "temperature": temp,
        "humidity": hum,
        "soil_moisture": soil_percent,
        "flow_rate": flow_rate,
        "device_id": ubinascii.hexlify(machine.unique_id()).decode()
    }

def send_to_google_sheets(data):
    try:
        payload = ujson.dumps(data)
        headers = {'Content-Type': 'application/json'}
        response = requests.post(GOOGLE_SCRIPT_URL, data=payload, headers=headers)
        response.close()
        return True
    except Exception as e:
        print("Google Sheets error:", e)
        return False

def get_ai_prediction(data):
    try:
        headers = {
            'Content-Type': 'application/json',
            'x-api-key': EI_API_KEY
        }
        response = requests.post(EDGE_IMPULSE_URL, data=ujson.dumps(data), headers=headers)
        result = response.json()
        response.close()
        return result.get('should_water', False)
    except Exception as e:
        print("AI prediction error:", e)
        return False

def control_valve(should_water):
    if should_water:
        print("Opening valve")
        relay.value(0)  # Active low
        time.sleep(30)  # Water for 30 seconds
        relay.value(1)
        print("Valve closed")
    else:
        relay.value(1)

def check_for_leaks(flow_data):
    # Simple leak detection - flow when valve is closed
    if relay.value() == 1 and flow_data['flow_rate'] > 0.1:  # 0.1 liter/min threshold
        trigger_alert("LEAK DETECTED! Flow rate: {} L/min".format(flow_data['flow_rate']))

def trigger_alert(message):
    try:
        alert_data = {
            "alert": message,
            "device_id": ubinascii.hexlify(machine.unique_id()).decode()
        }
        send_to_google_sheets(alert_data)
    except Exception as e:
        print("Alert error:", e)

# Main loop
def main():
    connect_wifi()
    flow_sensor.irq(trigger=Pin.IRQ_FALLING, handler=flow_handler)
    
    while True:
        sensor_data = get_sensor_data()
        print("Sensor data:", sensor_data)
        
        # Get AI decision
        should_water = get_ai_prediction(sensor_data)
        
        # Control irrigation
        control_valve(should_water)
        
        # Check for leaks
        check_for_leaks(sensor_data)
        
        # Log data
        if not send_to_google_sheets(sensor_data):
            print("Failed to log data")
        
        # Check for alert conditions
        if sensor_data['soil_moisture'] < EMAIL_ALERT_THRESHOLD:
            trigger_alert("Low soil moisture: {}%".format(sensor_data['soil_moisture']))
        
        time.sleep(60)  # Wait 1 minute between readings

if __name__ == "__main__":
    main()